
# TV mode: one publisher, many subscribers
application mytv {

    # Needed in case something goes wrong during the conversion. As long as this
    # isn't wrapped in a script, ffmpeg will terminate properly without the
    # default SIGKILL. Otherwise see nginx-rtmp wiki for a clean example.
    #exec_kill_signal term;

    # enable live streaming
    live on;



    # HLS
    #hls on;
    hls_path /tmp/hls;
    hls_fragment_naming system;

    drop_idle_publisher 20s;

    # record
    recorder dvr {
        record all;
        record_path /tmp/dvr;

        # append current timestamp to each flv
        #record_unique on;
        record_suffix _%Y-%m-%d_%H:%M:%S.flv;

        record_max_size 500M;
        record_interval 20m;

        exec_record_done bash -c "/keenaudio/waychill/scripts/post.sh $path $dirname/$basename.mp4 > /tmp/dvr/ffd 2>&1";

    }

    # publish only from localhost
    allow publish 127.0.0.1;
    deny publish all;

    allow play all;

    #push rtmp://localhost:1935/hls;

    #push rtmp://localhost:1935/dash;

}



# HLS

# For HLS to work please create a directory in tmpfs (/tmp/hls here)
# for the fragments. The directory contents is served via HTTP (see
# http{} section in config)
#
# Incoming stream must be in H264/AAC. For iPhones use baseline H264
# profile (see ffmpeg example).
# This example creates RTMP stream from movie ready for HLS:
#
# ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
#    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
#    -f flv rtmp://localhost:1935/hls/movie
#
# If you need to transcode live stream use 'exec' feature.
#
#application hls {
#    live on;
#    hls on;
#    hls_path /tmp/hls;
#}

# MPEG-DASH is similar to HLS

#application dash {
#    live on;
#    dash on;
#    dash_path /tmp/dash;
#}

